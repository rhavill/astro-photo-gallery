---
import { getCollection } from 'astro:content';
import { Image } from 'astro:assets';
import Layout from '../../layouts/Layout.astro';

async function getPhotos(albumId: string) {
  // 1. List all album files from collections path
  let images = import.meta.glob<{ default: ImageMetadata }>(
    // "/src/content/albums/**/*.{jpeg,jpg}"
    "/src/album/**/*"
  );

  // 2. Filter images by albumId
  images = Object.fromEntries(
    Object.entries(images).filter(([key]) => key.includes(albumId))
  );

  // 3. Images are promises, so we need to resolve the glob promises
  const resolvedImages = await Promise.all(
    Object.values(images).map((image) => image().then((mod) => mod.default))
  );

  return resolvedImages;
}

export async function getStaticPaths() {
  const albums = await getCollection('albums');
  const staticPaths = albums.map( album => {
    return {
      params: { id: album.id },
      props: { album},
    }
  });
	return staticPaths;
}

const { id } = Astro.params;
const { album } = Astro.props;
const photos = await getPhotos(id);

---
<Layout>
  <h1>{ album.data.displayName }</h1>
  <div class="photos">
    {photos.map(photo => {
      let width, height;
      const isLandscape = photo.width > photo.height;
      if (isLandscape) {
        width = 250;
      }
      else {
        height = 250;
      }
      return (
        <div class="photo">
          <Image src={photo} alt={album.data.displayName} width={width} height={height} />
        </div>
      )
    })}
  </div>
  <style>
    .photos {
      position: relative;
      display: grid;
      grid-template-columns: repeat(auto-fill, 250px);
      grid-template-rows: repeat(auto-fill, 250px);
      grid-gap: 3px;
    }
    .photo {
      display: flex;
      justify-content: center;
      align-items: center;
    }
  </style>
</Layout>
