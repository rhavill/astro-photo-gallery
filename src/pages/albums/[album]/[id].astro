---
import { getCollection } from 'astro:content';
import { Image } from 'astro:assets';
import Layout from '../../../layouts/Layout.astro';

export async function getStaticPaths() {
  const photos = await getCollection("photos");
  const paths = photos.map(photo => {
    const matches = photo.data.src.match(/\/([^\/]+)\/([^\/]+)\?/);
    const widths = [250, 360, 480, 640, 800, photo.data.width];
    const sizes = `(max-width: 360px) 250px, (max-width: 480px) 360px, (max-width: 640px) 480px, (max-width: 800px) 640px, (max-width: 1024px) 800px, ${photo.data.width}px`;
    photo.data.width = undefined;
    photo.data.height = undefined;
    return {
      params: { id: matches[2], album: matches[1] },
      props: { photo, widths, sizes },
    };
  });

  return paths;
}

const { id, album } = Astro.params;
const { photo, widths, sizes } = Astro.props;

---
<Layout>
  <!-- <pre>{JSON.stringify(photo, null, 2)}</pre> -->
  <div class="photo">
    <Image src={photo.data} alt={`${album} photo ${id}`} widths={widths} sizes={sizes} />
  </div>
  <style>
    .photo {
      display: flex;
      align-items: center;
      justify-content: center;
    }
  </style>
  <script define:vars={{ photo }}>
    const onSwipeLeft = () => alert('left', photo.data.nextPhotoId);
    const onSwipeRight = () => alert('right', photo.data.previousPhotoId);

    function registerSwipe({onSwipeLeft, onSwipeRight}) {
      let touchstartX = 0;
      let touchendX = 0;
      // let hadMultipleTouchPoints = false;
      let activeTouchEventsCount = 0;

      function checkDirection() {
        const isLongEnoughSwipe = Math.abs(touchendX - touchstartX) > 50;
        // const isNotSwipe = hadMultipleTouchPoints;
        const hasMultipleActiveTouches = activeTouchEventsCount > 1;
        activeTouchEventsCount--;
        // hadMultipleTouchPoints = false; // reset value for next touch event cycle
        alert(`isLongEnoughSwipe ${isLongEnoughSwipe}, hasMultipleActiveTouches ${hasMultipleActiveTouches}`);
        if (!isLongEnoughSwipe || hasMultipleActiveTouches) {
          return;
        }
        if (touchendX < touchstartX) onSwipeLeft();
        if (touchendX > touchstartX) onSwipeRight();
      }

      document.addEventListener('touchstart', e => {
        touchstartX = e.changedTouches[0].screenX;
        activeTouchEventsCount++;
        if (e.changedTouches.length > 1) {
          // hadMultipleTouchPoints = true;
        }
      })

      document.addEventListener('touchmove', e => {
        if (e.changedTouches.length > 1) {
          // hadMultipleTouchPoints = true;
        }
      })

      document.addEventListener('touchend', e => {
        touchendX = e.changedTouches[0].screenX;
        if (e.changedTouches.length > 1) {
          // hadMultipleTouchPoints = true;
        }
        checkDirection();
      })

    }

    registerSwipe({onSwipeLeft, onSwipeRight});
    console.log(photo)
  </script>
</Layout>
